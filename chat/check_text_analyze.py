from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline
import torch
import re
from typing import Dict


class OptimizedPhishingDetector:
    def __init__(self):
        self.model_name = "cybersectony/phishing-email-detection-distilbert_v2.4.1"
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        self._load_model()
        self._setup_rules()

    def _load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            self.tokenizer = AutoTokenizer.from_pretrained(self.model_name)
            self.model = AutoModelForSequenceClassification.from_pretrained(self.model_name)
            self.classifier = pipeline(
                "text-classification",
                model=self.model,
                tokenizer=self.tokenizer,
                device=self.device
            )
            print(f"‚úÖ –ú–æ–¥–µ–ª—å {self.model_name} –≥–æ—Ç–æ–≤–∞ (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device.upper()})")

            # Based on the model's documentation and your debug output:
            self.label_mapping = {
                'LABEL_0': 'phishing',
                'LABEL_1': 'phishing_url',
                'LABEL_2': 'legitimate',
                'LABEL_3': 'legitimate_url'
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            raise

    def _setup_rules(self):
        """–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.phishing_triggers = [
            "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", "—Å—Ä–æ—á–Ω–æ", "verify", "account",
            "–ø–∞—Ä–æ–ª—å", "–∫–∞—Ä—Ç–∞", "click", "—Ç—Ä–µ–±—É–µ—Ç", "–ø—Ä–æ–≤–µ—Ä–∫"
        ]
        self.safe_phrases = [
            "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–ø—Ä–∏–∫—Ä–µ–ø–ª—è—é", "–¥–æ–∫—É–º–µ–Ω—Ç",
            "–∫–æ–ª–ª–µ–≥–∞", "–ø—Ä–æ–µ–∫—Ç", "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "—Å–æ–≤–µ—â–∞–Ω–∏–µ"
        ]

    def analyze(self, text: str) -> Dict:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
        try:
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            text_lower = text.lower()
            has_url = bool(re.search(r"https?://\S+", text_lower))

            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª—å—é (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 512 —Ç–æ–∫–µ–Ω–æ–≤)
            model_result = self.classifier(text[:512])[0]
            label = model_result["label"]
            confidence = model_result["score"]

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –º–µ—Ç–∫—É –≤ —Å–º—ã—Å–ª–æ–≤—É—é
            mapped_label = self.label_mapping.get(label, 'unknown')

            print(f"Debug: Model returned '{label}' -> '{mapped_label}' with confidence {confidence:.2f}")

            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if mapped_label in ['phishing', 'phishing_url']:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                if any(phrase in text_lower for phrase in self.safe_phrases):
                    return self._safe_result(text, "–õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ", confidence=0.3)
                return self._phishing_result(text, confidence, has_url)

            elif mapped_label in ['legitimate', 'legitimate_url']:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã
                if any(trigger in text_lower for trigger in self.phishing_triggers):
                    return self._phishing_result(text, max(0.7, confidence), has_url)
                return self._safe_result(text, "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–∏—Å—å–º–æ")

            else:
                # –†–µ–∑–µ—Ä–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Ç–æ–∫
                if confidence > 0.7:
                    return self._phishing_result(text, confidence, has_url)
                return self._safe_result(text, "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", 0.5)

        except Exception as e:
            return {
                "error": str(e),
                "is_phishing": False,
                "confidence": 0.0,
                "details": {
                    "reason": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                    "text_sample": text[:50] + "..." if len(text) > 50 else text
                }
            }

    def _phishing_result(self, text: str, confidence: float, has_url: bool) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Ñ–∏—à–∏–Ω–≥–∞"""
        return {
            "is_phishing": True,
            "confidence": round(confidence, 2),
            "details": {
                "reason": "URL + —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞" if has_url else "–¢—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞",
                "text_sample": text[:50] + "..." if len(text) > 50 else text
            }
        }

    def _safe_result(self, text: str, reason: str, confidence: float = 0.0) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        return {
            "is_phishing": False,
            "confidence": confidence,
            "details": {
                "reason": reason,
                "text_sample": text[:50] + "..." if len(text) > 50 else text
            }
        }


if __name__ == "__main__":
    detector = OptimizedPhishingDetector()

    test_emails = [
        "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°—Ä–æ—á–Ω–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: http://amazon-security-update.com",
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü—Ä–∏–∫—Ä–µ–ø–ª—è—é –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
        "URGENT! Your PayPal account requires verification: http://paypal-secure.com",
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–æ–≤–µ—â–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00",
        "Invoice #45892: http://fake-invoice.com/pay",
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏"
    ]

    for email in test_emails:
        print("\n" + "=" * 50)
        print(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ: {email[:100]}...")
        result = detector.analyze(email)

        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            continue

        verdict = "üö® –§–ò–®–ò–ù–ì" if result["is_phishing"] else "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ"
        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"üìß {result['details']['text_sample']}")
        print(f"{verdict} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.0%}")
        print(f"–ü—Ä–∏—á–∏–Ω–∞: {result['details']['reason']}")