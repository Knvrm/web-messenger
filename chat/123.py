from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline
import torch
from typing import Dict


class PhishingDetectorBERT:
    def __init__(self):
        self.model_name = "ealvaradob/bert-finetuned-phishing"
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        self._load_model()
        self._setup_keywords()

    def _load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            self.tokenizer = AutoTokenizer.from_pretrained(self.model_name)
            self.model = AutoModelForSequenceClassification.from_pretrained(self.model_name)
            self.classifier = pipeline(
                "text-classification",
                model=self.model,
                tokenizer=self.tokenizer,
                device=self.device
            )
            print(f"‚úÖ –ú–æ–¥–µ–ª—å {self.model_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ {self.device.upper()}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            raise

    def _setup_keywords(self):
        """–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.phishing_keywords = [
            "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", "—Å—Ä–æ—á–Ω–æ", "verify", "account",
            "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ", "–∫–∞—Ä—Ç–∞", "password", "–ª–æ–≥–∏–Ω",
            "—Ç—Ä–µ–±—É–µ—Ç", "–¥–µ–π—Å—Ç–≤–∏", "–ø—Ä–æ–≤–µ—Ä–∫", "click",
            "link", "—Å—á—ë—Ç", "–±–∞–Ω–∫", "security"
        ]

    def analyze(self, text: str) -> Dict:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        try:
            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª—å—é
            result = self.classifier(text[:1024])[0]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            text_lower = text.lower()
            has_url = "http://" in text_lower or "https://" in text_lower
            has_keywords = any(kw in text_lower for kw in self.phishing_keywords)

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            is_phishing = result['label'] == 'phishing'
            confidence = result['score']

            if has_url and has_keywords:
                confidence = max(confidence, 0.85)  # –ü–æ–≤—ã—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            elif not has_url and is_phishing:
                confidence = min(confidence, 0.4)  # –ü–æ–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

            return {
                "is_phishing": is_phishing,
                "confidence": round(confidence, 4),
                "features": {
                    "has_url": has_url,
                    "has_keywords": has_keywords,
                    "text_sample": text[:50] + "..." if len(text) > 50 else text
                }
            }

        except Exception as e:
            return {
                "error": str(e),
                "is_phishing": False,
                "confidence": 0.0
            }


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    try:
        detector = PhishingDetectorBERT()

        test_cases = [
            "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç Amazon –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: http://amazon-security-update.com",
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü—Ä–∏–∫—Ä–µ–ø–ª—è—é –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
            "URGENT! Your PayPal account requires verification. Click here: http://paypal-secure.com",
            "–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –≤–∞—à –ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞",
            "Invoice #45892: http://fake-invoice.com/pay"
        ]

        for text in test_cases:
            result = detector.analyze(text)
            print(f"\nüìß –¢–µ–∫—Å—Ç: {result['features']['text_sample']}")
            print(f"üîç –í–µ—Ä–¥–∏–∫—Ç: {'üö® –§–ò–®–ò–ù–ì' if result['is_phishing'] else '‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ'}")
            print(f"üî¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.1%}")
            print(f"üåê URL: {'–µ—Å—Ç—å' if result['features']['has_url'] else '–Ω–µ—Ç'}")
            print(f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {'–µ—Å—Ç—å' if result['features']['has_keywords'] else '–Ω–µ—Ç'}")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")